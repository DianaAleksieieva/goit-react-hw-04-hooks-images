{"version":3,"sources":["components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Searchbar/Searchbar.jsx","components/Modal/Modal.jsx","services/images-api.jsx","components/Button/Button.jsx","components/App.jsx","services/scroll.jsx","index.js"],"names":["ImageGalleryItem","id","tags","image","onClick","className","src","alt","ImageGallery","onSelect","map","webformatURL","largeImageURL","Searchbar","props","useState","query","setQuery","reset","onSubmit","event","preventDefault","target","elements","value","type","onChange","currentTarget","name","autoComplete","autoFocus","placeholder","modalRoot","document","querySelector","Modal","useEffect","window","addEventListener","handleKeyDown","e","code","onClose","srcImg","altImg","createPortal","width","height","imagesAPI","fetchImages","page","fetch","then","response","ok","json","Promise","refect","Error","Button","Status","App","setImage","setPage","status","setStatus","selectedImg","setSelectedImg","images","prevImages","hits","scrollTo","top","documentElement","scrollHeight","behavior","handleSelectedImg","color","length","prevPage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8c5e459.chunk.js","sourcesContent":["import '../style.css';\r\nimport PropTypes from 'prop-types';\r\nexport const ImageGalleryItem = ({id,tags,image,onClick}) => {\r\n    \r\n    return (\r\n        <li key={id} className=\"ImageGalleryItem\" >\r\n            <img\r\n                src={image}\r\n                alt={tags}\r\n                className=\"ImageGalleryItem-image\"\r\n                onClick={onClick}/>\r\n        </li> )\r\n            }\r\nImageGalleryItem.propTypes = {\r\n    image: PropTypes.string.isRequired,\r\n  id: PropTypes.number,\r\n  tags: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n}","import '../style.css';\r\nimport { ImageGalleryItem } from '../ImageGalleryItem/ImageGalleryItem';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport PropTypes from 'prop-types';\r\n  \r\nexport default function ImageGallery({ image, onSelect }) {\r\n    return (<ul className=\"ImageGallery\">\r\n        {image.map(({ id, webformatURL, tags, largeImageURL }) =>\r\n            <ImageGalleryItem\r\n                id={id}\r\n                tags={tags}\r\n                image={webformatURL}\r\n                largeImageURL={largeImageURL} \r\n                onClick={() => onSelect({ largeImageURL, tags } )}/>\r\n        )}\r\n        </ul>)\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      largeImageURL: PropTypes.string,\r\n      image: PropTypes.string,\r\n      tags: PropTypes.string,\r\n    }),\r\n  ),\r\n  onSelect: PropTypes.func.isRequired,\r\n}","import '../style.css';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Searchbar(props) {\r\nconst [query, setQuery] = useState('');\r\n \r\nconst handleChange = event => {\r\n    setQuery(event.currentTarget.value)\r\n  }\r\n\r\nconst handleSubmit = event => {\r\n    event.preventDefault()\r\n    if (event.target.elements.query.value === \"\") {\r\n      return\r\n    }\r\n    props.onSubmit(query)\r\n    reset()\r\n  }\r\nconst reset = () => {\r\n      setQuery('')\r\n  }\r\n\r\n    return ( <header className=\"Searchbar\">\r\n  <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n    <button type=\"submit\" className=\"SearchForm-button\" >\r\n      <span className=\"SearchForm-button-label\">Search</span>\r\n    </button>\r\n\r\n    <input\r\n       onChange={handleChange}\r\n          value={query}\r\n          name = 'query'\r\n      className=\"SearchForm-input\"\r\n      type=\"text\"\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n      placeholder=\"Search images and photos\"\r\n    />\r\n  </form>\r\n</header>\r\n    )}\r\n\r\n\r\nSearchbar.propTypes = {\r\n    query: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","import '../style.css';\r\nimport React, { useEffect  } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal(props) {\r\n  useEffect(() => {window.addEventListener('keydown', handleKeyDown); })\r\n\r\n  const handleKeyDown = e => {\r\n    if (e.code === 'Escape') {\r\n      props.onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      props.onClose();\r\n    }\r\n  };\r\n  \r\n  const { srcImg, altImg } = props;\r\n  \r\n    return createPortal(\r\n        <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n        <div className=\"Modal\">\r\n          <img width=\"800\" height=\"600\"  src={srcImg} alt={altImg} />\r\n          </div>\r\n         </div>,\r\n      modalRoot,\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n    srcImg: PropTypes.string.isRequired,\r\n  altImg: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","function fetchImages(query, page) {\r\n    return fetch(`https://pixabay.com/api/?key=16471285-08281fa67152cd8514adcae08&q=${query}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=12`).then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        return Promise.refect(new Error('EROR'))\r\n    })\r\n}\r\nconst imagesAPI = {\r\n    fetchImages\r\n}\r\nexport default imagesAPI","import '../style.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n  export const Button = ({ onClick }) => (\r\n  <button  className=\"Button\" type=\"button\" onClick={onClick}>\r\n    Load more\r\n  </button>\r\n);\r\n\r\n            \r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};","import './style.css';\nimport React, { useState, useEffect  } from 'react';\nimport ImageGallery from './ImageGallery/ImageGallery';\nimport Searchbar from './Searchbar/Searchbar';\nimport Modal from './Modal/Modal';\nimport imagesAPI from '../services/images-api';\nimport { scroll } from '../services/scroll';\nimport { Button } from './Button/Button';\nimport Loader from \"react-loader-spinner\";\n\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport default function App(props) {\n  const [query, setQuery] = useState('');\n  const [image, setImage] = useState([]);\n  const [page, setPage] = useState(1);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [selectedImg, setSelectedImg] = useState(null);\n  \n  \n  useEffect(() => {\n    if (query !== '') {\n      setStatus(Status.RESOLVED)\n      imagesAPI.fetchImages(query, page)\n        .then(images => setImage(prevImages => [...prevImages, ...images.hits]))\n    }\n\n  }, [query, page])\nscroll()\n\n    const loadNextPage = () => {\n      setPage(prevPage => (prevPage + 1))\n    };\n\n    const newQuery = query => {\n    setQuery(query)\n    setPage(1)\n    if (image !== []) {\n      setImage([]);\n    }\n    };\n\n  const handleSelectedImg = (selectedImg) => {\n      setSelectedImg( selectedImg);\n    };\n   const closeModal = ()=> {\n      setSelectedImg(null);\n    };\n    \n    return (<div> <Searchbar query={query} onSubmit={newQuery} />\n      {status === Status.IDLE && <div className=\"Message\">Введите запрос в поиск.</div>}\n      {status === Status.PENDING && <div className=\"Wrapper\">\n        <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} margin-top={150} />\n        <ImageGallery image={image} onSelect={handleSelectedImg}> </ImageGallery>\n      </div>}\n      \n      {status === Status.RESOLVED && <div>\n        <ImageGallery image={image} onSelect={handleSelectedImg} />\n        {image.length !== 0 && <Button onClick={loadNextPage} />}\n      {image === []   &&\n        <div className=\"Message\">Не удалось найти изображений по даному запросу</div>}\n      </div>}\n     \n      {selectedImg && (\n        <Modal\n          srcImg={selectedImg.largeImageURL}\n          altImg={selectedImg.tags}\n          onClose={closeModal}\n        />)}\n    </div>)\n  }\n","export const scroll = () => {\r\n  return window.scrollTo({\r\n    top: document.documentElement.scrollHeight,\r\n    behavior: 'smooth',\r\n  });\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}